// Code generated by MockGen. DO NOT EDIT.
// Source: postgres.go

// Package mock_db is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostgresDB is a mock of PostgresDB interface.
type MockPostgresDB struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresDBMockRecorder
}

// MockPostgresDBMockRecorder is the mock recorder for MockPostgresDB.
type MockPostgresDBMockRecorder struct {
	mock *MockPostgresDB
}

// NewMockPostgresDB creates a new mock instance.
func NewMockPostgresDB(ctrl *gomock.Controller) *MockPostgresDB {
	mock := &MockPostgresDB{ctrl: ctrl}
	mock.recorder = &MockPostgresDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresDB) EXPECT() *MockPostgresDBMockRecorder {
	return m.recorder
}

// BackUpPostgreSQLData mocks base method.
func (m *MockPostgresDB) BackUpPostgreSQLData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackUpPostgreSQLData")
	ret0, _ := ret[0].(error)
	return ret0
}

// BackUpPostgreSQLData indicates an expected call of BackUpPostgreSQLData.
func (mr *MockPostgresDBMockRecorder) BackUpPostgreSQLData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackUpPostgreSQLData", reflect.TypeOf((*MockPostgresDB)(nil).BackUpPostgreSQLData))
}

// ConnectPostgreSQL mocks base method.
func (m *MockPostgresDB) ConnectPostgreSQL() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectPostgreSQL")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectPostgreSQL indicates an expected call of ConnectPostgreSQL.
func (mr *MockPostgresDBMockRecorder) ConnectPostgreSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectPostgreSQL", reflect.TypeOf((*MockPostgresDB)(nil).ConnectPostgreSQL))
}

// RestorePostgreSQLData mocks base method.
func (m *MockPostgresDB) RestorePostgreSQLData(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePostgreSQLData", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestorePostgreSQLData indicates an expected call of RestorePostgreSQLData.
func (mr *MockPostgresDBMockRecorder) RestorePostgreSQLData(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePostgreSQLData", reflect.TypeOf((*MockPostgresDB)(nil).RestorePostgreSQLData), filePath)
}
